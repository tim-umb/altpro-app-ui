/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import {
  Button,
  Divider,
  Typography,
  Avatar,
  Chip,
  IconButton,
  SvgIcon,
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import StarIcon from '@mui/icons-material/Star';
import AddIcon from '@mui/icons-material/Add';
import { styled } from '@mui/material/styles';
import { EntityContainerAnimateStateProps } from 'src/types';
import { animated, useSpring, easings } from 'react-spring';
import useEntityContainerAnimateState from 'src/components/EntityContainerAnimateState/useEntityContainerAnimateState';

const StateOpen: any = styled('div')({
  borderRadius: `6px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  height: `709px`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
});

const Content: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  height: `709px`,
  margin: `0px`,
});

const ProfileContainer: any = styled('div')({
  display: `flex`,
  position: `absolute`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `400px`,
  height: `709px`,
  left: `0px`,
  top: `0px`,
});

const ProfileContainerHead: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['background']['default'],
  borderRadius: `6px 0px 0px 0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `16px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  height: `56px`,
  margin: `0px`,
}));

const Content1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Entity: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['h5'].fontStyle,
  fontFamily: theme.typography['Typography']['h5'].fontFamily,
  fontWeight: theme.typography['Typography']['h5'].fontWeight,
  fontSize: theme.typography['Typography']['h5'].fontSize,
  letterSpacing: theme.typography['Typography']['h5'].letterSpacing,
  lineHeight: theme.typography['Typography']['h5'].lineHeight,
  textDecoration: theme.typography['Typography']['h5'].textDecoration,
  textTransform: theme.typography['Typography']['h5'].textTransform,
  margin: `0px`,
}));

const Subheader: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Button1: any = styled(Button, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['primary']['main'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `500`,
  fontSize: `13px`,
  letterSpacing: `0.46000000834465027px`,
  textDecoration: `none`,
  lineHeight: `22px`,
  textTransform: `uppercase`,
}));

const DividerHorizontal: any = styled(Divider)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const ProfileContent: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['background']['default'],
  borderRadius: `0px 0px 0px 6px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `32px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px`,
}));

const ProfileContentHeader: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const EntityName: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['h3'].fontStyle,
  fontFamily: theme.typography['Typography']['h3'].fontFamily,
  fontWeight: theme.typography['Typography']['h3'].fontWeight,
  fontSize: theme.typography['Typography']['h3'].fontSize,
  letterSpacing: theme.typography['Typography']['h3'].letterSpacing,
  lineHeight: theme.typography['Typography']['h3'].lineHeight,
  textDecoration: theme.typography['Typography']['h3'].textDecoration,
  textTransform: theme.typography['Typography']['h3'].textTransform,
}));

const Avatar1: any = styled(Avatar, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `24px 0px 0px 0px`,
  color: theme.palette['background']['paper-elevation-0'],
  fontStyle: theme.typography['Components']['avatar-initials'].fontStyle,
  fontFamily: theme.typography['Components']['avatar-initials'].fontFamily,
  fontWeight: theme.typography['Components']['avatar-initials'].fontWeight,
  fontSize: theme.typography['Components']['avatar-initials'].fontSize,
  letterSpacing:
    theme.typography['Components']['avatar-initials'].letterSpacing,
  lineHeight: theme.typography['Components']['avatar-initials'].lineHeight,
  textDecoration:
    theme.typography['Components']['avatar-initials'].textDecoration,
  textTransform:
    theme.typography['Components']['avatar-initials'].textTransform,
}));

const Frame1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `24px 0px 0px 0px`,
});

const Typography1: any = styled('div')(({ theme }: any) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['h6'].fontStyle,
  fontFamily: theme.typography['Typography']['h6'].fontFamily,
  fontWeight: theme.typography['Typography']['h6'].fontWeight,
  fontSize: theme.typography['Typography']['h6'].fontSize,
  letterSpacing: theme.typography['Typography']['h6'].letterSpacing,
  lineHeight: theme.typography['Typography']['h6'].lineHeight,
  textDecoration: theme.typography['Typography']['h6'].textDecoration,
  textTransform: theme.typography['Typography']['h6'].textTransform,
  margin: `0px`,
}));

const Typography2: any = styled('div')(({ theme }: any) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  margin: `0px`,
}));

const Tags: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: `16px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `16px 0px 0px 0px`,
});

const Chip1: any = styled(Chip, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Components']['chip-label'].fontStyle,
  fontFamily: theme.typography['Components']['chip-label'].fontFamily,
  fontWeight: theme.typography['Components']['chip-label'].fontWeight,
  fontSize: theme.typography['Components']['chip-label'].fontSize,
  letterSpacing: theme.typography['Components']['chip-label'].letterSpacing,
  lineHeight: theme.typography['Components']['chip-label'].lineHeight,
  textDecoration: theme.typography['Components']['chip-label'].textDecoration,
  textTransform: theme.typography['Components']['chip-label'].textTransform,
}));

const Chip2: any = styled(Chip, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px 0px 0px 8px`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Components']['chip-label'].fontStyle,
  fontFamily: theme.typography['Components']['chip-label'].fontFamily,
  fontWeight: theme.typography['Components']['chip-label'].fontWeight,
  fontSize: theme.typography['Components']['chip-label'].fontSize,
  letterSpacing: theme.typography['Components']['chip-label'].letterSpacing,
  lineHeight: theme.typography['Components']['chip-label'].lineHeight,
  textDecoration: theme.typography['Components']['chip-label'].textDecoration,
  textTransform: theme.typography['Components']['chip-label'].textTransform,
}));

const Chip3: any = styled(Chip, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px 0px 0px 8px`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Components']['chip-label'].fontStyle,
  fontFamily: theme.typography['Components']['chip-label'].fontFamily,
  fontWeight: theme.typography['Components']['chip-label'].fontWeight,
  fontSize: theme.typography['Components']['chip-label'].fontSize,
  letterSpacing: theme.typography['Components']['chip-label'].letterSpacing,
  lineHeight: theme.typography['Components']['chip-label'].lineHeight,
  textDecoration: theme.typography['Components']['chip-label'].textDecoration,
  textTransform: theme.typography['Components']['chip-label'].textTransform,
}));

const InfoTable: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `16px 0px 0px 0px`,
});

const Row2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Components']['table-header2'].fontStyle,
  fontFamily: theme.typography['Components']['table-header2'].fontFamily,
  fontWeight: theme.typography['Components']['table-header2'].fontWeight,
  fontSize: theme.typography['Components']['table-header2'].fontSize,
  letterSpacing: theme.typography['Components']['table-header2'].letterSpacing,
  lineHeight: theme.typography['Components']['table-header2'].lineHeight,
  textDecoration:
    theme.typography['Components']['table-header2'].textDecoration,
  textTransform: theme.typography['Components']['table-header2'].textTransform,
  margin: `0px`,
}));

const Typography3: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography4: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography5: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell3: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box3: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell4: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  margin: `0px`,
}));

const Typography6: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const DividerHorizontal1: any = styled(Divider)(({ theme }: any) => ({
  width: `336px`,
  position: `absolute`,
  left: `0px`,
  top: `59px`,
}));

const Row3: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell11: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box4: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell5: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Components']['table-header2'].fontStyle,
  fontFamily: theme.typography['Components']['table-header2'].fontFamily,
  fontWeight: theme.typography['Components']['table-header2'].fontWeight,
  fontSize: theme.typography['Components']['table-header2'].fontSize,
  letterSpacing: theme.typography['Components']['table-header2'].letterSpacing,
  lineHeight: theme.typography['Components']['table-header2'].lineHeight,
  textDecoration:
    theme.typography['Components']['table-header2'].textDecoration,
  textTransform: theme.typography['Components']['table-header2'].textTransform,
  margin: `0px`,
}));

const Typography7: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell21: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box5: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography8: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography9: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell31: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box6: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell6: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  margin: `0px`,
}));

const Typography10: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const DividerHorizontal2: any = styled(Divider)(({ theme }: any) => ({
  width: `336px`,
  position: `absolute`,
  left: `0px`,
  top: `59px`,
}));

const Row4: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell12: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box7: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell7: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Components']['table-header2'].fontStyle,
  fontFamily: theme.typography['Components']['table-header2'].fontFamily,
  fontWeight: theme.typography['Components']['table-header2'].fontWeight,
  fontSize: theme.typography['Components']['table-header2'].fontSize,
  letterSpacing: theme.typography['Components']['table-header2'].letterSpacing,
  lineHeight: theme.typography['Components']['table-header2'].lineHeight,
  textDecoration:
    theme.typography['Components']['table-header2'].textDecoration,
  textTransform: theme.typography['Components']['table-header2'].textTransform,
  margin: `0px`,
}));

const Typography11: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell22: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box8: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography12: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography13: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell32: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box9: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell8: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  margin: `0px`,
}));

const Typography14: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const DividerHorizontal3: any = styled(Divider)(({ theme }: any) => ({
  width: `336px`,
  position: `absolute`,
  left: `0px`,
  top: `59px`,
}));

const Row5: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell13: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box10: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell9: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Components']['table-header2'].fontStyle,
  fontFamily: theme.typography['Components']['table-header2'].fontFamily,
  fontWeight: theme.typography['Components']['table-header2'].fontWeight,
  fontSize: theme.typography['Components']['table-header2'].fontSize,
  letterSpacing: theme.typography['Components']['table-header2'].letterSpacing,
  lineHeight: theme.typography['Components']['table-header2'].lineHeight,
  textDecoration:
    theme.typography['Components']['table-header2'].textDecoration,
  textTransform: theme.typography['Components']['table-header2'].textTransform,
  margin: `0px`,
}));

const Typography15: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell23: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box11: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography16: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography17: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell33: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box12: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell10: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  margin: `0px`,
}));

const Typography18: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const DividerHorizontal4: any = styled(Divider)(({ theme }: any) => ({
  width: `336px`,
  position: `absolute`,
  left: `0px`,
  top: `59px`,
}));

const Row51: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell14: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Box13: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell15: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Components']['table-header2'].fontStyle,
  fontFamily: theme.typography['Components']['table-header2'].fontFamily,
  fontWeight: theme.typography['Components']['table-header2'].fontWeight,
  fontSize: theme.typography['Components']['table-header2'].fontSize,
  letterSpacing: theme.typography['Components']['table-header2'].letterSpacing,
  lineHeight: theme.typography['Components']['table-header2'].lineHeight,
  textDecoration:
    theme.typography['Components']['table-header2'].textDecoration,
  textTransform: theme.typography['Components']['table-header2'].textTransform,
  margin: `0px`,
}));

const Typography19: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell24: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Box14: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography20: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography21: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const Cell34: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Box15: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Cell16: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Typography22: any = styled(Typography, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
}));

const DividerHorizontal5: any = styled(Divider)(({ theme }: any) => ({
  width: `336px`,
  position: `absolute`,
  left: `0px`,
  top: `215px`,
}));

const FormContainer: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['colors']['grey']['100'],
  display: `flex`,
  position: `absolute`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `500px`,
  height: `709px`,
  left: `400px`,
  top: `0px`,
}));

const DividerVertical: any = styled(Divider)(({ theme }: any) => ({
  height: `709px`,
  margin: `0px`,
}));

const Body: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const FormContainerHeader: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `16px`,
  boxSizing: `border-box`,
  height: `56px`,
  width: `467px`,
  margin: `0px`,
});

const AvatarWrapper: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 8px 0px 0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const IconButton1: any = styled(IconButton)(({ theme }: any) => ({
  margin: `0px`,
}));

const Text: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Header: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  margin: `0px`,
}));

const Subheader1: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const IconButton2: any = styled(IconButton)(({ theme }: any) => ({
  margin: `0px`,
}));

const FormContent: any = animated(
  styled('div', {
    shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
  })(({ data }: any) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    alignSelf: data.currentVariant === 'Stateclose' ? 'unset' : `stretch`,
    height: `652px`,
    margin: `0px`,
    width: 'unset',
  }))
);

const InvestorContainer: any = animated(
  styled('div', {
    shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
  })(({ theme, data }: any) => ({
    backgroundColor: theme.palette['colors']['grey']['100'],
    display: `flex`,
    position: `absolute`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    width: `500px`,
    height: `709px`,
    left: `900px`,
    top: `0px`,
  }))
);

const DividerVertical1: any = styled(Divider)(({ theme }: any) => ({
  height: `709px`,
  margin: `0px`,
}));

const Body1: any = animated(
  styled('div', {
    shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
  })(({ data }: any) => ({
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    flex: `1`,
    height: `58px`,
    margin: `0px`,
  }))
);

const InvestorContainerHea: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['background']['default'],
  borderRadius: `0px 6px 0px 0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `16px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  height: `56px`,
  margin: `0px`,
}));

const Content2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const IndividualInvestors: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['h5'].fontStyle,
  fontFamily: theme.typography['Typography']['h5'].fontFamily,
  fontWeight: theme.typography['Typography']['h5'].fontWeight,
  fontSize: theme.typography['Typography']['h5'].fontSize,
  letterSpacing: theme.typography['Typography']['h5'].letterSpacing,
  lineHeight: theme.typography['Typography']['h5'].lineHeight,
  textDecoration: theme.typography['Typography']['h5'].textDecoration,
  textTransform: theme.typography['Typography']['h5'].textTransform,
  margin: `0px`,
}));

const Subheader2: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['text']['secondary'],
  fontStyle: theme.typography['Typography']['body1'].fontStyle,
  fontFamily: theme.typography['Typography']['body1'].fontFamily,
  fontWeight: theme.typography['Typography']['body1'].fontWeight,
  fontSize: theme.typography['Typography']['body1'].fontSize,
  letterSpacing: theme.typography['Typography']['body1'].letterSpacing,
  lineHeight: theme.typography['Typography']['body1'].lineHeight,
  textDecoration: theme.typography['Typography']['body1'].textDecoration,
  textTransform: theme.typography['Typography']['body1'].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Button2: any = styled(Button, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['primary']['main'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `500`,
  fontSize: `13px`,
  letterSpacing: `0.46000000834465027px`,
  textDecoration: `none`,
  lineHeight: `22px`,
  textTransform: `uppercase`,
}));

const DividerHorizontal6: any = styled(Divider)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const InvestorContent: any = animated(
  styled('div', {
    shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
  })(({ data }: any) => ({
    borderRadius: `0px 0px 6px 0px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `32px`,
    boxSizing: `border-box`,
    width: `499px`,
    margin: `0px`,
    alignSelf: data.currentVariant === 'Stateclose' ? `stretch` : 'unset',
    height: 'unset',
  }))
);

const Button3: any = styled(Button, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  margin: `0px`,
  color: theme.palette['primary']['contrast'],
  fontStyle: theme.typography['Components']['button-medium'].fontStyle,
  fontFamily: theme.typography['Components']['button-medium'].fontFamily,
  fontWeight: theme.typography['Components']['button-medium'].fontWeight,
  fontSize: theme.typography['Components']['button-medium'].fontSize,
  letterSpacing: theme.typography['Components']['button-medium'].letterSpacing,
  lineHeight: theme.typography['Components']['button-medium'].lineHeight,
  textDecoration:
    theme.typography['Components']['button-medium'].textDecoration,
  textTransform: theme.typography['Components']['button-medium'].textTransform,
}));

function EntityContainerAnimateState(
  props: EntityContainerAnimateStateProps
): JSX.Element {
  const { data, fns } = useEntityContainerAnimateState();

  const FormContentStateOpen = { width: '499px' };
  const FormContentStateclose = { width: `467px` };
  const [FormContentStateStyles, FormContentStateApi] = useSpring(() => ({
    from: eval('FormContent' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const InvestorContainerStateOpen = { width: `500px`, left: `900px` };
  const InvestorContainerStateclose = { width: `1000px`, left: `400px` };
  const [InvestorContainerStateStyles, InvestorContainerStateApi] = useSpring(
    () => ({
      from: eval('InvestorContainer' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const Body1StateOpen = { height: `58px` };
  const Body1Stateclose = { height: '58px' };
  const [Body1StateStyles, Body1StateApi] = useSpring(() => ({
    from: eval('Body1' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const InvestorContentStateOpen = { width: `499px`, height: '100px' };
  const InvestorContentStateclose = { width: '999px', height: `1px` };
  const [InvestorContentStateStyles, InvestorContentStateApi] = useSpring(
    () => ({
      from: eval('InvestorContent' + data.currentVariant),
      config: { duration: 1000 },
      delay: 500,
    })
  );

  const switchStateToStateOpen: (
    duration: number,
    delay: number,
    easing: string
  ) => void = (
    duration: number = 0,
    delay: number = 0,
    easing: string = 'linear'
  ) => {
    FormContentStateApi.start({
      ...FormContentStateOpen,
      delay,
      config: { duration, easing: easings[easing] },
    });
    InvestorContainerStateApi.start({
      ...InvestorContainerStateOpen,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Body1StateApi.start({
      ...Body1StateOpen,
      delay,
      config: { duration, easing: easings[easing] },
    });
    InvestorContentStateApi.start({
      ...InvestorContentStateOpen,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };

  const switchStateToStateclose: (
    duration: number,
    delay: number,
    easing: string
  ) => void = (
    duration: number = 0,
    delay: number = 0,
    easing: string = 'linear'
  ) => {
    FormContentStateApi.start({
      ...FormContentStateclose,
      delay,
      config: { duration, easing: easings[easing] },
    });
    InvestorContainerStateApi.start({
      ...InvestorContainerStateclose,
      delay,
      config: { duration, easing: easings[easing] },
    });
    Body1StateApi.start({
      ...Body1Stateclose,
      delay,
      config: { duration, easing: easings[easing] },
    });
    InvestorContentStateApi.start({
      ...InvestorContentStateclose,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };
  return (
    <StateOpen className={props.className}>
      <Content>
        <ProfileContainer>
          <ProfileContainerHead>
            <Content1>
              <Entity>{`Entity`}</Entity>
              {false && <Subheader>{`{Subheader}`}</Subheader>}
            </Content1>
            <Button1
              size={'small'}
              color={'primary'}
              disabled={false}
              variant={'text'}
              onClick={() => {
                switchStateToStateOpen(500, 0, 'easeOutQuart');
                fns.setCurrentVariant('StateOpen');
              }}
              data={data}
            >
              {'Edit'}
            </Button1>
          </ProfileContainerHead>
          <DividerHorizontal orientation="horizontal" />
          <ProfileContent>
            <ProfileContentHeader>
              <EntityName variant={'body1'} gutterBottom={false} data={data}>
                {'XYZ Corporation'}
              </EntityName>
              <Avatar1
                sx={{ width: 40, height: 40 }}
                variant={'circular'}
                data={data}
              >
                {'XC'}
              </Avatar1>
              <Frame1>
                <Typography1>{`Entity type:`}</Typography1>
                <Typography2>{`S Corporation`}</Typography2>
              </Frame1>
            </ProfileContentHeader>
            <Tags>
              <Chip1
                label={'Accredited'}
                size={'medium'}
                color={'default'}
                disabled={false}
                variant={'filled'}
                data={data}
              />
              <Chip2
                label={'Domestic'}
                size={'medium'}
                color={'default'}
                disabled={false}
                variant={'filled'}
                data={data}
              />
              <Chip3
                label={'Control Person Exempt'}
                size={'medium'}
                color={'default'}
                disabled={false}
                variant={'filled'}
                data={data}
              />
            </Tags>
            <InfoTable>
              <Row2>
                <Cell1>
                  <Box1>
                    <Cell>{`Tax ID`}</Cell>
                    {false && (
                      <Typography3
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography3>
                    )}
                  </Box1>
                </Cell1>
                {false && (
                  <Cell2>
                    <Box2>
                      <Typography4
                        variant={'body2'}
                        gutterBottom={false}
                      ></Typography4>
                      {false && (
                        <Typography5
                          variant={'body2'}
                          gutterBottom={false}
                          data={data}
                        >
                          {'Cell'}
                        </Typography5>
                      )}
                    </Box2>
                  </Cell2>
                )}
                <Cell3>
                  <Box3>
                    <Cell4>{`{Number}`}</Cell4>
                    {false && (
                      <Typography6
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography6>
                    )}
                  </Box3>
                </Cell3>
                {false && <DividerHorizontal1 orientation="horizontal" />}
              </Row2>
              <Row3>
                <Cell11>
                  <Box4>
                    <Cell5>{`Domicile`}</Cell5>
                    {false && (
                      <Typography7
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography7>
                    )}
                  </Box4>
                </Cell11>
                {false && (
                  <Cell21>
                    <Box5>
                      <Typography8
                        variant={'body2'}
                        gutterBottom={false}
                      ></Typography8>
                      {false && (
                        <Typography9
                          variant={'body2'}
                          gutterBottom={false}
                          data={data}
                        >
                          {'Cell'}
                        </Typography9>
                      )}
                    </Box5>
                  </Cell21>
                )}
                <Cell31>
                  <Box6>
                    <Cell6>{`{String}`}</Cell6>
                    {false && (
                      <Typography10
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography10>
                    )}
                  </Box6>
                </Cell31>
                {false && <DividerHorizontal2 orientation="horizontal" />}
              </Row3>
              <Row4>
                <Cell12>
                  <Box7>
                    <Cell7>{`Accreditation`}</Cell7>
                    {false && (
                      <Typography11
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography11>
                    )}
                  </Box7>
                </Cell12>
                {false && (
                  <Cell22>
                    <Box8>
                      <Typography12
                        variant={'body2'}
                        gutterBottom={false}
                      ></Typography12>
                      {false && (
                        <Typography13
                          variant={'body2'}
                          gutterBottom={false}
                          data={data}
                        >
                          {'Cell'}
                        </Typography13>
                      )}
                    </Box8>
                  </Cell22>
                )}
                <Cell32>
                  <Box9>
                    <Cell8>{`{String}`}</Cell8>
                    {false && (
                      <Typography14
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography14>
                    )}
                  </Box9>
                </Cell32>
                {false && <DividerHorizontal3 orientation="horizontal" />}
              </Row4>
              <Row5>
                <Cell13>
                  <Box10>
                    <Cell9>{`Control Person`}</Cell9>
                    {false && (
                      <Typography15
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography15>
                    )}
                  </Box10>
                </Cell13>
                {false && (
                  <Cell23>
                    <Box11>
                      <Typography16
                        variant={'body2'}
                        gutterBottom={false}
                      ></Typography16>
                      {false && (
                        <Typography17
                          variant={'body2'}
                          gutterBottom={false}
                          data={data}
                        >
                          {'Cell'}
                        </Typography17>
                      )}
                    </Box11>
                  </Cell23>
                )}
                <Cell33>
                  <Box12>
                    <Cell10>{`{String}`}</Cell10>
                    {false && (
                      <Typography18
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography18>
                    )}
                  </Box12>
                </Cell33>
                {false && <DividerHorizontal4 orientation="horizontal" />}
              </Row5>
              <Row51>
                <Cell14>
                  <Box13>
                    <Cell15>{`Exempt reason`}</Cell15>
                    {false && (
                      <Typography19
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography19>
                    )}
                  </Box13>
                </Cell14>
                {false && (
                  <Cell24>
                    <Box14>
                      <Typography20
                        variant={'body2'}
                        gutterBottom={false}
                      ></Typography20>
                      {false && (
                        <Typography21
                          variant={'body2'}
                          gutterBottom={false}
                          data={data}
                        >
                          {'Cell'}
                        </Typography21>
                      )}
                    </Box14>
                  </Cell24>
                )}
                <Cell34>
                  <Box15>
                    <Cell16>
                      {`Meets the required criteria for exemption. Investments comply with relevant laws and regulations.`}
                    </Cell16>
                    {false && (
                      <Typography22
                        variant={'body2'}
                        gutterBottom={false}
                        data={data}
                      >
                        {'Cell'}
                      </Typography22>
                    )}
                  </Box15>
                </Cell34>
                {false && <DividerHorizontal5 orientation="horizontal" />}
              </Row51>
            </InfoTable>
          </ProfileContent>
        </ProfileContainer>
        <FormContainer>
          <DividerVertical orientation="vertical" />
          <Body>
            <FormContainerHeader>
              <AvatarWrapper>
                <IconButton1
                  size={'small'}
                  color={'default'}
                  disabled={false}
                  onClick={() => {
                    switchStateToStateclose(250, 0, 'easeOutCubic');
                    fns.setCurrentVariant('Stateclose');
                  }}
                >
                  <SvgIcon
                    component={CloseIcon}
                    htmlColor={`rgba(0, 0, 0, 0.56)`}
                  ></SvgIcon>
                </IconButton1>
              </AvatarWrapper>
              <Text>
                <Header>{`Add Entity`}</Header>
                {false && <Subheader1>{`{Subheader}`}</Subheader1>}
              </Text>
              {false && (
                <IconButton2 size={'medium'} color={'default'} disabled={false}>
                  <SvgIcon
                    component={StarIcon}
                    htmlColor={`rgba(0, 0, 0, 0.56)`}
                  ></SvgIcon>
                </IconButton2>
              )}
            </FormContainerHeader>
            <FormContent
              data={data}
              style={{ ...FormContentStateStyles }}
            ></FormContent>
          </Body>
        </FormContainer>
        <InvestorContainer
          data={data}
          style={{ ...InvestorContainerStateStyles }}
        >
          <DividerVertical1 orientation="vertical" />
          <Body1 data={data} style={{ ...Body1StateStyles }}>
            <InvestorContainerHea>
              <Content2>
                <IndividualInvestors>
                  {`Individual Investors`}
                </IndividualInvestors>
                {false && <Subheader2>{`{Subheader}`}</Subheader2>}
              </Content2>
              {false && (
                <Button2
                  size={'small'}
                  color={'primary'}
                  disabled={false}
                  variant={'text'}
                  data={data}
                >
                  {'Edit'}
                </Button2>
              )}
            </InvestorContainerHea>
            <DividerHorizontal6 orientation="horizontal" />
            <InvestorContent
              data={data}
              style={{ ...InvestorContentStateStyles }}
            >
              <Button3
                size={'medium'}
                color={'primary'}
                disabled={false}
                variant={'contained'}
                endIcon={
                  <SvgIcon
                    component={AddIcon}
                    htmlColor={`rgba(255, 255, 255, 1)`}
                  ></SvgIcon>
                }
                data={data}
              >
                {'Add Individual'}
              </Button3>
            </InvestorContent>
          </Body1>
        </InvestorContainer>
      </Content>
    </StateOpen>
  );
}

export default EntityContainerAnimateState;
